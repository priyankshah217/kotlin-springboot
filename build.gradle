import org.jetbrains.kotlin.gradle.tasks.*
plugins {
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.2.71'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.2.71'
    id "org.jetbrains.kotlin.plugin.jpa" version "1.2.71"
    id "org.jetbrains.kotlin.plugin.noarg" version "1.2.71"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.2.71"
    id "org.jetbrains.kotlin.kapt" version "1.2.71"
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id "com.palantir.docker" version "0.22.1"
    id 'jacoco'
}

group = 'com.springboot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

allOpen {
    annotation('javax.persistence.Entity')
    annotation('javax.persistence.Embeddable')
    annotation('javax.persistence.MappedSuperclass')
}

repositories {
    jcenter()
    mavenCentral()
}

ext {
    set('springCloudVersion', "Greenwich.SR1")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: "mockito-core"
        exclude module: 'junit'
    }
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.16'
    runtimeOnly group: 'com.h2database', name: 'h2', version: '1.4.199'
    testImplementation group: 'io.mockk', name: 'mockk', version: '1.9.3'
    implementation group: 'com.ninja-squad', name: 'springmockk', version: '1.1.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.1.1.RELEASE'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.8'
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.23.2"
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.23.2', ext: 'pom'
}

docker {
    def accountID = System.getenv("AWS_ACCOUNT_ID")
    def ebRegion = System.getenv("EB_REGION")
    name "$accountID" + (".dkr.ecr." + "$ebRegion" + ".amazonaws.com/priyankshah217/$bootJar.baseName")
    tag "awsRegistry", "$accountID" + ".dkr.ecr.ap-southeast-1.amazonaws.com/priyankshah217/kotlindemo"
    dependsOn build as Task
    files bootJar.archivePath
    buildArgs(['JAR_FILE': bootJar.archiveName])
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = [
                    'com.springboot.kotlindemo.KotlinDemoApplicationKt',
                    'com.springboot.kotlindemo.RandomQuoteResponse',
                    'com.springboot.kotlindemo.Customer'
            ]
        }
        rule {
            element = 'CLASS'
            includes = [
                    'com.springboot.kotlindemo.Customer*',
                    'com.springboot.kotlindemo.QuoteService',
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }

}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification


tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}